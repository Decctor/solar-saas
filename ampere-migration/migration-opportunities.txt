  
const typeEquivalents = {
  'SISTEMA FOTOVOLTAICO': {
    tipo: {
      id: '6615785ddcb7a6e66ede9785',
      titulo: 'SISTEMA FOTOVOLTAICO',
    },
    categoriaVenda: 'KIT',
  },
  'OPERAÇÃO E MANUTENÇÃO': {
    tipo: {
      id: '661586b9774ffe3a569a9f5c',
      titulo: 'OPERAÇÃO E MANUTENÇÃO',
    },
    categoriaVenda: 'PLANO',
  },
  'MONTAGEM E DESMONTAGEM': {
    tipo: {
      id: '6615879a07e7ffc27a40f2d5',
      titulo: 'SERVIÇOS AVULSOS',
    },
    categoriaVenda: 'SERVIÇOS',
  },
  MONITORAMENTO: {
    tipo: {
      id: '6615879a07e7ffc27a40f2d5',
      titulo: 'SERVIÇOS AVULSOS',
    },
    categoriaVenda: 'SERVIÇOS',
  },
}
  
  const opportunities: (TOpportunity & { _id: ObjectId })[] = (AmpereProjects as (TAmpereProject & { _id: { $oid: string } })[]).map((project) => {
    return {
      _id: new ObjectId(project._id.$oid),
      nome: project.nome,
      idParceiro: '65454ba15cf3e3ecf534b308',
      tipo: typeEquivalents[project.tipoProjeto as keyof typeof typeEquivalents]?.tipo || {
        id: '6615785ddcb7a6e66ede9785',
        titulo: 'SISTEMA FOTOVOLTAICO',
      },
      categoriaVenda: typeEquivalents[project.tipoProjeto as keyof typeof typeEquivalents]?.categoriaVenda || 'KIT',
      descricao: project.descricao || '',
      identificador: project.identificador,
      responsaveis: [
        {
          id: '65453222e345279bdfcac0dc',
          nome: 'Lucas Fernandes',
          papel: 'VENDEDOR',
          avatar_url: 'https://avatars.githubusercontent.com/u/60222823?s=400&u=d82dbc3d1d666b315b793f1888fd65c92d8ca0a9&v=4',
        },
      ],
      idCliente: project.clienteId,
      localizacao: {
        cep: project.localizacao.cep,
        uf: project.localizacao.uf,
        cidade: project.localizacao.cidade,
        bairro: project.localizacao.bairro,
        endereco: project.localizacao.endereco,
        numeroOuIdentificador: project.localizacao.numeroOuIdentificador,
        complemento: project.localizacao.complemento,
        // distancia: z.number().optional().nullable(),
      },
      perda: {
        idMotivo: undefined,
        descricaoMotivo: project.motivoPerda,
        data: project.dataPerda,
      },
      ganho: {
        idProjeto: project.contrato?.id || '',
        data: project.contrato?.dataAssinatura,
      },
      instalacao: {
        concessionaria: null,
        numero: undefined,
        grupo: undefined,
        tipoLigacao: undefined,
        tipoTitular: undefined,
        nomeTitular: undefined,
      },
      autor: {
        id: '65453222e345279bdfcac0dc',
        nome: 'Lucas Fernandes',
        avatar_url: 'https://avatars.githubusercontent.com/u/60222823?s=400&u=d82dbc3d1d666b315b793f1888fd65c92d8ca0a9&v=4',
      },
      dataInsercao: project.dataInsercao || new Date().toISOString(),
      // adicionar contrato e solicitação de contrato futuramente
    } as TOpportunity & { _id: ObjectId }
  })





  
const GeneralProjectSchema = z.object({
  nome: z.string(),
  tipoProjeto: z.string(),
  identificador: z.string(),
  idOportunidade: z.string().optional().nullable(),
  idParceiro: z.string(),
  idIndicacao: z.string({ invalid_type_error: 'Tipo não válido para o ID de referência da indicação.' }).optional().nullable(),
  responsavel: z.object({
    id: z.string(),
    nome: z.string(),
    avatar_url: z.string().optional().nullable(),
  }),
  representante: z.object({
    id: z.string(),
    nome: z.string(),
    avatar_url: z.string().optional().nullable(),
  }),
  localizacao: z.object({
    cep: z.string().optional().nullable(),
    uf: z.string(),
    cidade: z.string(),
    bairro: z.string().optional().nullable(),
    endereco: z.string().optional().nullable(),
    numeroOuIdentificador: z.string().optional().nullable(),
    complemento: z.string().optional().nullable(),
    // distancia: z.number().optional().nullable(),
  }),
  clienteId: z.string(),
  propostaAtiva: z.string().optional().nullable(),
  titularInstalacao: z.string().optional().nullable(),
  numeroInstalacaoConcessionaria: z.string().optional().nullable(),
  tipoTitular: z
    .union([z.literal('PESSOA FISICA'), z.literal('PESSOA JURIDICA')])
    .optional()
    .nullable(),
  tipoLigacao: z
    .union([z.literal('EXISTENTE'), z.literal('NOVA')])
    .optional()
    .nullable(),
  tipoInstalacao: z
    .union([z.literal('URBANO'), z.literal('RURAL')])
    .optional()
    .nullable(),
  credor: z.string().optional().nullable(),
  anexos: z
    .object({
      documentoComFoto: z.string().optional().nullable(),
      iptu: z.string().optional().nullable(),
      contaDeEnergia: z.string().optional().nullable(),
      laudo: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
  descricao: z.string().optional().nullable(),
  funis: z.array(z.object({ id: z.union([z.string(), z.number()]), etapaId: z.union([z.string(), z.number()]) })),
  dataPerda: z.string().optional().nullable(),
  motivoPerda: z.string().optional().nullable(),
  contrato: z
    .object({
      id: z.string().optional().nullable(),
      idProposta: z.string().nullable(),
      dataAssinatura: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
  solicitacaoContrato: z
    .object({
      id: z.string().optional().nullable(),
      idProposta: z.string().nullable(),
      dataSolicitacao: z.string().optional().nullable(),
    })
    .optional()
    .nullable(),
  dataInsercao: z.string().datetime(),
})

export type TAmpereProject = z.infer<typeof GeneralProjectSchema>
